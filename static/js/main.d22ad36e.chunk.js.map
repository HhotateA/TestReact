{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","todos","newId","newTitle","clickTodo","this","slice","todo","id","done","console","log","title","setState","e","target","value","newTask","push","className","changeState","bind","TextField","name","label","onChange","handleChange","Button","onClick","addNewTask","Component","TodoList","props","map","key","index","Todo","preventDefault","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8QAKMA,G,wDACJ,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXC,MAAO,GACPC,MAAO,EACPC,SAAU,YALD,E,wDASDC,GACV,IAAMH,EAAQI,KAAKL,MAAMC,MAAMK,QACzBC,EAAON,EAAMG,EAAUI,IAC7BD,EAAKE,MAAQF,EAAKE,KAClBR,EAAMG,EAAUI,IAAMD,EACtBG,QAAQC,IAAIJ,EAAKK,MAAQ,MAAQL,EAAKE,MACtCC,QAAQC,IAAIN,KAAKL,MAAMC,OACvBI,KAAKQ,SAAS,CAACZ,Y,mCAIJa,GACXJ,QAAQC,IAAIG,EAAEC,OAAOC,OACrBX,KAAKQ,SAAS,CAACV,SAAUW,EAAEC,OAAOC,U,mCAKlC,IAAMf,EAAQI,KAAKL,MAAMC,MAAMK,QAC3BJ,EAAQG,KAAKL,MAAME,MACnBC,EAAWE,KAAKL,MAAMG,SACpBc,EAAU,CACdT,GAAIN,EACJU,MAAOT,EACPM,MAAM,GAERP,GAAS,EACTD,EAAMiB,KAAKD,GACXZ,KAAKQ,SAAS,CAACZ,MAAOA,IACtBI,KAAKQ,SAAS,CAACX,MAAOA,IACtBG,KAAKQ,SAAS,CAACV,SAAUA,M,+BAKzB,OADAO,QAAQC,IAAI,UAEV,yBAAKQ,UAAY,OACf,0CACA,kBAAC,EAAD,CACElB,MAASI,KAAKL,MAAMC,MACpBmB,YAAef,KAAKe,YAAYC,KAAKhB,QAEvC,6BACE,8BACE,kBAACiB,EAAA,EAAD,CACEC,KAAO,KACPf,GAAK,eACLgB,MAASnB,KAAKL,MAAMG,SACpBsB,SAAYpB,KAAKqB,aAAaL,KAAKhB,QAErC,kBAACsB,EAAA,EAAD,CAAQC,QAASvB,KAAKwB,WAAWR,KAAKhB,OAAtC,oB,GA5DMyB,cAoEZC,E,uKACM,IAAD,OACD9B,EAAQI,KAAK2B,MAAM/B,MAAMgC,KAAK,SAAA1B,GAAI,OACtC,kBAAC,EAAD,CACE2B,IAAO3B,EAAKC,GACZ2B,MAAS5B,EAAK4B,MACd3B,GAAMD,EAAKC,GACXI,MAASL,EAAKK,MACdH,KAAQF,EAAKE,KACbW,YAAe,EAAKY,MAAMZ,iBAG9B,OACE,4BACGnB,O,GAdc6B,aAoBjBM,E,uKACM,IAAD,OACP,OAAG/B,KAAK2B,MAAMvB,KACL,KAGL,wBAAIU,UAAU,QACZ,kCAAQd,KAAK2B,MAAMxB,GAAnB,KACA,kCAAQH,KAAK2B,MAAMpB,MAAnB,KACA,kBAACe,EAAA,EAAD,CAAQC,QAAS,SAACd,GAAMA,EAAEuB,iBAAkB,EAAKL,MAAMZ,YAAY,EAAKY,SAAxE,uB,GATSF,aAgBJ/B,ICjGKuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.d22ad36e.chunk.js","sourcesContent":["import React,{ Component } from 'react'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button';\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      todos: [ ],\n      newId: 0,\n      newTitle: \"New Task\",\n    }\n  }\n  // タスクの完了処理\n  changeState(clickTodo) {\n    const todos = this.state.todos.slice();\n    const todo = todos[clickTodo.id];\n    todo.done = !todo.done;\n    todos[clickTodo.id] = todo;\n    console.log(todo.title + \" : \" + todo.done);\n    console.log(this.state.todos);\n    this.setState({todos});\n  }\n  \n  // TextFieldの入力\n  handleChange(e) {\n    console.log(e.target.value);\n    this.setState({newTitle: e.target.value});\n  }\n\n  // 新たなタスクの追加\n  addNewTask() {\n    const todos = this.state.todos.slice();\n    let newId = this.state.newId;\n    let newTitle = this.state.newTitle;\n    const newTask = {\n      id: newId,\n      title: newTitle,\n      done: false\n    }\n    newId += 1;\n    todos.push(newTask);\n    this.setState({todos: todos});\n    this.setState({newId: newId});\n    this.setState({newTitle: newTitle});\n  }\n\n  render(){\n    console.log(\"reload\");\n    return (\n      <div className = \"App\">\n        <h2> TodoList </h2>\n        <TodoList\n          todos = {this.state.todos}\n          changeState = {this.changeState.bind(this)}\n        />\n        <div>\n          <form>\n            <TextField\n              name = \"aa\"\n              id = \"NewTaskField\"\n              label = {this.state.newTitle}\n              onChange = {this.handleChange.bind(this)}\n            />\n            <Button onClick={this.addNewTask.bind(this)}> AddTask </Button>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass TodoList extends Component {\n  render() {\n    const todos = this.props.todos.map( todo =>\n      <Todo\n        key = {todo.id}\n        index = {todo.index}\n        id = {todo.id}\n        title = {todo.title}\n        done = {todo.done}\n        changeState = {this.props.changeState}\n      />\n    );\n    return(\n      <ul>\n        {todos}\n      </ul>\n    );\n  }\n}\n\nclass Todo extends Component {\n  render() {\n    if(this.props.done){\n      return null;\n    } else {\n      return(\n        <li className=\"Cell\">\n          <span> {this.props.id} </span>\n          <span> {this.props.title} </span>\n          <Button onClick={(e)=>{ e.preventDefault(); this.props.changeState(this.props)}}> 完了 </Button>\n        </li>\n      );\n    }\n  } \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}